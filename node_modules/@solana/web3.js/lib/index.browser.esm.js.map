{"version":3,"file":"index.browser.esm.js","sources":["../src/util/to-buffer.ts","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../node_modules/rollup-plugin-node-polyfills/polyfills/global.js","../node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js","../node_modules/rollup-plugin-node-polyfills/polyfills/util.js","../node_modules/rollup-plugin-node-polyfills/polyfills/assert.js","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/punycode/punycode.es6.js","../node_modules/rollup-plugin-node-polyfills/polyfills/qs.js","../node_modules/rollup-plugin-node-polyfills/polyfills/url.js","../src/epoch-schedule.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\nimport {Buffer} from 'buffer';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\ntype PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\ntype PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","export default (typeof global !== \"undefined\" ? global :\n  typeof self !== \"undefined\" ? self :\n  typeof window !== \"undefined\" ? window : {});","\nvar inherits;\nif (typeof Object.create === 'function'){\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\nexport default inherits;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport process from 'process';\nvar formatRegExp = /%[sdj%]/g;\nexport function format(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexport function deprecate(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexport function debuglog(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = 0;\n      debugs[set] = function() {\n        var msg = format.apply(null, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nexport function inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexport function isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexport function isNull(arg) {\n  return arg === null;\n}\n\nexport function isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\nexport function isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\n\nexport function isUndefined(arg) {\n  return arg === void 0;\n}\n\nexport function isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nexport function isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexport function isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexport function isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\n\nexport function isBuffer(maybeBuf) {\n  return Buffer.isBuffer(maybeBuf);\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexport function log() {\n  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n}\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nimport inherits from './inherits';\nexport {inherits}\n\nexport function _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport default {\n  inherits: inherits,\n  _extend: _extend,\n  log: log,\n  isBuffer: isBuffer,\n  isPrimitive: isPrimitive,\n  isFunction: isFunction,\n  isError: isError,\n  isDate: isDate,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isUndefined: isUndefined,\n  isSymbol: isSymbol,\n  isString: isString,\n  isNumber: isNumber,\n  isNullOrUndefined: isNullOrUndefined,\n  isNull: isNull,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  inspect: inspect,\n  deprecate: deprecate,\n  format: format,\n  debuglog: debuglog\n}\n","\nfunction compare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break;\n    }\n  }\n\n  if (x < y) {\n    return -1;\n  }\n  if (y < x) {\n    return 1;\n  }\n  return 0;\n}\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    if (hasOwn.call(obj, key)) keys.push(key);\n  }\n  return keys;\n};\n// based on node assert, original notice:\n\n// http://wiki.commonjs.org/wiki/Unit_Testing/1.0\n//\n// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!\n//\n// Originally from narwhal.js (http://narwhaljs.org)\n// Copyright (c) 2009 Thomas Robinson <280north.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the 'Software'), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport {isBuffer} from 'buffer';\nimport {isPrimitive, inherits, isError, isFunction, isRegExp, isDate, inspect as utilInspect} from 'util';\nvar pSlice = Array.prototype.slice;\nvar _functionsHaveNames;\nfunction functionsHaveNames() {\n  if (typeof _functionsHaveNames !== 'undefined') {\n    return _functionsHaveNames;\n  }\n  return _functionsHaveNames = (function () {\n    return function foo() {}.name === 'foo';\n  }());\n}\nfunction pToString (obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction isView(arrbuf) {\n  if (isBuffer(arrbuf)) {\n    return false;\n  }\n  if (typeof global.ArrayBuffer !== 'function') {\n    return false;\n  }\n  if (typeof ArrayBuffer.isView === 'function') {\n    return ArrayBuffer.isView(arrbuf);\n  }\n  if (!arrbuf) {\n    return false;\n  }\n  if (arrbuf instanceof DataView) {\n    return true;\n  }\n  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {\n    return true;\n  }\n  return false;\n}\n// 1. The assert module provides functions that throw\n// AssertionError's when particular conditions are not met. The\n// assert module must conform to the following interface.\n\nfunction assert(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nexport default assert;\n\n// 2. The AssertionError is defined in assert.\n// new assert.AssertionError({ message: message,\n//                             actual: actual,\n//                             expected: expected })\n\nvar regex = /\\s*function\\s+([^\\(\\s]*)\\s*/;\n// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js\nfunction getName(func) {\n  if (!isFunction(func)) {\n    return;\n  }\n  if (functionsHaveNames()) {\n    return func.name;\n  }\n  var str = func.toString();\n  var match = str.match(regex);\n  return match && match[1];\n}\nassert.AssertionError = AssertionError;\nexport function AssertionError(options) {\n  this.name = 'AssertionError';\n  this.actual = options.actual;\n  this.expected = options.expected;\n  this.operator = options.operator;\n  if (options.message) {\n    this.message = options.message;\n    this.generatedMessage = false;\n  } else {\n    this.message = getMessage(this);\n    this.generatedMessage = true;\n  }\n  var stackStartFunction = options.stackStartFunction || fail;\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, stackStartFunction);\n  } else {\n    // non v8 browsers so we can have a stacktrace\n    var err = new Error();\n    if (err.stack) {\n      var out = err.stack;\n\n      // try to strip useless frames\n      var fn_name = getName(stackStartFunction);\n      var idx = out.indexOf('\\n' + fn_name);\n      if (idx >= 0) {\n        // once we have located the function frame\n        // we need to strip out everything before it (and its line)\n        var next_line = out.indexOf('\\n', idx + 1);\n        out = out.substring(next_line + 1);\n      }\n\n      this.stack = out;\n    }\n  }\n}\n\n// assert.AssertionError instanceof Error\ninherits(AssertionError, Error);\n\nfunction truncate(s, n) {\n  if (typeof s === 'string') {\n    return s.length < n ? s : s.slice(0, n);\n  } else {\n    return s;\n  }\n}\nfunction inspect(something) {\n  if (functionsHaveNames() || !isFunction(something)) {\n    return utilInspect(something);\n  }\n  var rawname = getName(something);\n  var name = rawname ? ': ' + rawname : '';\n  return '[Function' +  name + ']';\n}\nfunction getMessage(self) {\n  return truncate(inspect(self.actual), 128) + ' ' +\n         self.operator + ' ' +\n         truncate(inspect(self.expected), 128);\n}\n\n// At present only the three keys mentioned above are used and\n// understood by the spec. Implementations or sub modules can pass\n// other keys to the AssertionError's constructor - they will be\n// ignored.\n\n// 3. All of the following functions must throw an AssertionError\n// when a corresponding condition is not met, with a message that\n// may be undefined if not provided.  All assertion methods provide\n// both the actual and expected values to the assertion error for\n// display purposes.\n\nexport function fail(actual, expected, message, operator, stackStartFunction) {\n  throw new AssertionError({\n    message: message,\n    actual: actual,\n    expected: expected,\n    operator: operator,\n    stackStartFunction: stackStartFunction\n  });\n}\n\n// EXTENSION! allows for well behaved errors defined elsewhere.\nassert.fail = fail;\n\n// 4. Pure assertion tests whether a value is truthy, as determined\n// by !!guard.\n// assert.ok(guard, message_opt);\n// This statement is equivalent to assert.equal(true, !!guard,\n// message_opt);. To test strictly for the value true, use\n// assert.strictEqual(true, guard, message_opt);.\n\nexport function ok(value, message) {\n  if (!value) fail(value, true, message, '==', ok);\n}\nassert.ok = ok;\nexport {ok as assert};\n\n// 5. The equality assertion tests shallow, coercive equality with\n// ==.\n// assert.equal(actual, expected, message_opt);\nassert.equal = equal;\nexport function equal(actual, expected, message) {\n  if (actual != expected) fail(actual, expected, message, '==', equal);\n}\n\n// 6. The non-equality assertion tests for whether two objects are not equal\n// with != assert.notEqual(actual, expected, message_opt);\nassert.notEqual = notEqual;\nexport function notEqual(actual, expected, message) {\n  if (actual == expected) {\n    fail(actual, expected, message, '!=', notEqual);\n  }\n}\n\n// 7. The equivalence assertion tests a deep equality relation.\n// assert.deepEqual(actual, expected, message_opt);\nassert.deepEqual = deepEqual;\nexport function deepEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'deepEqual', deepEqual);\n  }\n}\nassert.deepStrictEqual = deepStrictEqual;\nexport function deepStrictEqual(actual, expected, message) {\n  if (!_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'deepStrictEqual', deepStrictEqual);\n  }\n}\n\nfunction _deepEqual(actual, expected, strict, memos) {\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n  } else if (isBuffer(actual) && isBuffer(expected)) {\n    return compare(actual, expected) === 0;\n\n  // 7.2. If the expected value is a Date object, the actual value is\n  // equivalent if it is also a Date object that refers to the same time.\n  } else if (isDate(actual) && isDate(expected)) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3 If the expected value is a RegExp object, the actual value is\n  // equivalent if it is also a RegExp object with the same source and\n  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).\n  } else if (isRegExp(actual) && isRegExp(expected)) {\n    return actual.source === expected.source &&\n           actual.global === expected.global &&\n           actual.multiline === expected.multiline &&\n           actual.lastIndex === expected.lastIndex &&\n           actual.ignoreCase === expected.ignoreCase;\n\n  // 7.4. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if ((actual === null || typeof actual !== 'object') &&\n             (expected === null || typeof expected !== 'object')) {\n    return strict ? actual === expected : actual == expected;\n\n  // If both values are instances of typed arrays, wrap their underlying\n  // ArrayBuffers in a Buffer each to increase performance\n  // This optimization requires the arrays to have the same type as checked by\n  // Object.prototype.toString (aka pToString). Never perform binary\n  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their\n  // bit patterns are not identical.\n  } else if (isView(actual) && isView(expected) &&\n             pToString(actual) === pToString(expected) &&\n             !(actual instanceof Float32Array ||\n               actual instanceof Float64Array)) {\n    return compare(new Uint8Array(actual.buffer),\n                   new Uint8Array(expected.buffer)) === 0;\n\n  // 7.5 For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else if (isBuffer(actual) !== isBuffer(expected)) {\n    return false;\n  } else {\n    memos = memos || {actual: [], expected: []};\n\n    var actualIndex = memos.actual.indexOf(actual);\n    if (actualIndex !== -1) {\n      if (actualIndex === memos.expected.indexOf(expected)) {\n        return true;\n      }\n    }\n\n    memos.actual.push(actual);\n    memos.expected.push(expected);\n\n    return objEquiv(actual, expected, strict, memos);\n  }\n}\n\nfunction isArguments(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n}\n\nfunction objEquiv(a, b, strict, actualVisitedObjects) {\n  if (a === null || a === undefined || b === null || b === undefined)\n    return false;\n  // if one is a primitive, the other must be same\n  if (isPrimitive(a) || isPrimitive(b))\n    return a === b;\n  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))\n    return false;\n  var aIsArgs = isArguments(a);\n  var bIsArgs = isArguments(b);\n  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))\n    return false;\n  if (aIsArgs) {\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return _deepEqual(a, b, strict);\n  }\n  var ka = objectKeys(a);\n  var kb = objectKeys(b);\n  var key, i;\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length !== kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] !== kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))\n      return false;\n  }\n  return true;\n}\n\n// 8. The non-equivalence assertion tests for any deep inequality.\n// assert.notDeepEqual(actual, expected, message_opt);\nassert.notDeepEqual = notDeepEqual;\nexport function notDeepEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, false)) {\n    fail(actual, expected, message, 'notDeepEqual', notDeepEqual);\n  }\n}\n\nassert.notDeepStrictEqual = notDeepStrictEqual;\nexport function notDeepStrictEqual(actual, expected, message) {\n  if (_deepEqual(actual, expected, true)) {\n    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);\n  }\n}\n\n\n// 9. The strict equality assertion tests strict equality, as determined by ===.\n// assert.strictEqual(actual, expected, message_opt);\nassert.strictEqual = strictEqual;\nexport function strictEqual(actual, expected, message) {\n  if (actual !== expected) {\n    fail(actual, expected, message, '===', strictEqual);\n  }\n}\n\n// 10. The strict non-equality assertion tests for strict inequality, as\n// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);\nassert.notStrictEqual = notStrictEqual;\nexport function notStrictEqual(actual, expected, message) {\n  if (actual === expected) {\n    fail(actual, expected, message, '!==', notStrictEqual);\n  }\n}\n\nfunction expectedException(actual, expected) {\n  if (!actual || !expected) {\n    return false;\n  }\n\n  if (Object.prototype.toString.call(expected) == '[object RegExp]') {\n    return expected.test(actual);\n  }\n\n  try {\n    if (actual instanceof expected) {\n      return true;\n    }\n  } catch (e) {\n    // Ignore.  The instanceof check doesn't work for arrow functions.\n  }\n\n  if (Error.isPrototypeOf(expected)) {\n    return false;\n  }\n\n  return expected.call({}, actual) === true;\n}\n\nfunction _tryBlock(block) {\n  var error;\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nfunction _throws(shouldThrow, block, expected, message) {\n  var actual;\n\n  if (typeof block !== 'function') {\n    throw new TypeError('\"block\" argument must be a function');\n  }\n\n  if (typeof expected === 'string') {\n    message = expected;\n    expected = null;\n  }\n\n  actual = _tryBlock(block);\n\n  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +\n            (message ? ' ' + message : '.');\n\n  if (shouldThrow && !actual) {\n    fail(actual, expected, 'Missing expected exception' + message);\n  }\n\n  var userProvidedMessage = typeof message === 'string';\n  var isUnwantedException = !shouldThrow && isError(actual);\n  var isUnexpectedException = !shouldThrow && actual && !expected;\n\n  if ((isUnwantedException &&\n      userProvidedMessage &&\n      expectedException(actual, expected)) ||\n      isUnexpectedException) {\n    fail(actual, expected, 'Got unwanted exception' + message);\n  }\n\n  if ((shouldThrow && actual && expected &&\n      !expectedException(actual, expected)) || (!shouldThrow && actual)) {\n    throw actual;\n  }\n}\n\n// 11. Expected to throw an error:\n// assert.throws(block, Error_opt, message_opt);\nassert.throws = throws;\nexport function throws(block, /*optional*/error, /*optional*/message) {\n  _throws(true, block, error, message);\n}\n\n// EXTENSION! This is annoying to write outside this module.\nassert.doesNotThrow = doesNotThrow;\nexport function doesNotThrow(block, /*optional*/error, /*optional*/message) {\n  _throws(false, block, error, message);\n}\n\nassert.ifError = ifError;\nexport function ifError(err) {\n  if (err) throw err;\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\ntype TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\ntype NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: typeof BufferLayout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @ts-ignore\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tconst parts = string.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tconst labels = string.split('.');\n\tconst encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = array => String.fromCodePoint(...array);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tlet oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tlet inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tlet basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue == n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.1.0',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\nfunction stringifyPrimitive(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n}\n\nexport function stringify (obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\nexport function parse(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\nexport default {\n  encode: stringify,\n  stringify: stringify,\n  decode: parse,\n  parse: parse\n}\nexport {stringify as encode, parse as decode};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nimport {toASCII} from 'punycode';\nimport {isObject,isString,isNullOrUndefined,isNull} from 'util';\nimport {parse as qsParse,stringify as qsStringify} from 'querystring';\nexport {\n  urlParse as parse,\n  urlResolve as resolve,\n  urlResolveObject as resolveObject,\n  urlFormat as format\n};\nexport default {\n  parse: urlParse,\n  resolve: urlResolve,\n  resolveObject: urlResolveObject,\n  format: urlFormat,\n  Url: Url\n}\nexport function Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n\n  // Special case for a simple path URL\n  simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n  // RFC 2396: characters reserved for delimiting URLs.\n  // We actually just auto-escape these.\n  delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  // Characters that are never ever allowed in a hostname.\n  // Note that any invalid chars are also handled, but these\n  // are the ones that are *expected* to be seen, so we fast-path\n  // them.\n  nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n  hostEndingChars = ['/', '?', '#'],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    'javascript': true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    'javascript': true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    'http': true,\n    'https': true,\n    'ftp': true,\n    'gopher': true,\n    'file': true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  };\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  return parse(this, url, parseQueryString, slashesDenoteHost);\n}\n\nfunction parse(self, url, parseQueryString, slashesDenoteHost) {\n  if (!isString(url)) {\n    throw new TypeError('Parameter \\'url\\' must be a string, not ' + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n    splitter =\n    (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n    uSplit = url.split(splitter),\n    slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      self.path = rest;\n      self.href = rest;\n      self.pathname = simplePath[1];\n      if (simplePath[2]) {\n        self.search = simplePath[2];\n        if (parseQueryString) {\n          self.query = qsParse(self.search.substr(1));\n        } else {\n          self.query = self.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        self.search = '';\n        self.query = {};\n      }\n      return self;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    self.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      self.slashes = true;\n    }\n  }\n  var i, hec, l, p;\n  if (!hostlessProtocol[proto] &&\n    (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      self.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    self.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    parseHost(self);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    self.hostname = self.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = self.hostname[0] === '[' &&\n      self.hostname[self.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = self.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            self.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (self.hostname.length > hostnameMaxLen) {\n      self.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      self.hostname = self.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      self.hostname = toASCII(self.hostname);\n    }\n\n    p = self.port ? ':' + self.port : '';\n    var h = self.hostname || '';\n    self.host = h + p;\n    self.href += self.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      self.hostname = self.hostname.substr(1, self.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    self.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    self.search = rest.substr(qm);\n    self.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      self.query = qsParse(self.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    self.search = '';\n    self.query = {};\n  }\n  if (rest) self.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n    self.hostname && !self.pathname) {\n    self.pathname = '/';\n  }\n\n  //to support http.request\n  if (self.pathname || self.search) {\n    p = self.pathname || '';\n    var s = self.search || '';\n    self.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  self.href = format(self);\n  return self;\n}\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (isString(obj)) obj = parse({}, obj);\n  return format(obj);\n}\n\nfunction format(self) {\n  var auth = self.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = self.protocol || '',\n    pathname = self.pathname || '',\n    hash = self.hash || '',\n    host = false,\n    query = '';\n\n  if (self.host) {\n    host = auth + self.host;\n  } else if (self.hostname) {\n    host = auth + (self.hostname.indexOf(':') === -1 ?\n      self.hostname :\n      '[' + this.hostname + ']');\n    if (self.port) {\n      host += ':' + self.port;\n    }\n  }\n\n  if (self.query &&\n    isObject(self.query) &&\n    Object.keys(self.query).length) {\n    query = qsStringify(self.query);\n  }\n\n  var search = self.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (self.slashes ||\n    (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n}\n\nUrl.prototype.format = function() {\n  return format(this);\n}\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n      result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n  var relPath;\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n    isRelAbs = (\n      relative.host ||\n      relative.pathname && relative.pathname.charAt(0) === '/'\n    ),\n    mustEndAbs = (isRelAbs || isSourceAbs ||\n      (result.host && relative.pathname)),\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n  relPath = relative.pathname && relative.pathname.split('/') || [];\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n  var authInHost;\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n      relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      authInHost = result.host && result.host.indexOf('@') > 0 ?\n        result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!isNull(result.pathname) || !isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n        (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n    (result.host || relative.host || srcPath.length > 1) &&\n    (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n    (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n    (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n      srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    authInHost = result.host && result.host.indexOf('@') > 0 ?\n      result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!isNull(result.pathname) || !isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n      (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  return parseHost(this);\n};\n\nfunction parseHost(self) {\n  var host = self.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      self.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) self.hostname = host;\n}\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import {format as urlFormat, parse as urlParse} from 'url';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = urlParse(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== null) {\n    url.port = String(Number(url.port) + 1);\n  }\n  return urlFormat(url);\n}\n","import assert from 'assert';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {parse as urlParse} from 'url';\nimport fetch, {Response} from 'node-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.href,\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Signer>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      if ('data' in res.error) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport assert from 'assert';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {ethAddress: rawAddress, message, signature, recoveryId} = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","keys","length","Error","map","key","enum","Map","MAX_SEED_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddress","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","inspect","isArray","hasOwnProperty","objectKeys","global","inherits","utilInspect","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","chars","str","span","authorized","lockup","ns64","getAlloc","type","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","account","recentBlockhash","instructions","isAccountWritable","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","u8","seq","slice","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","add","items","compileMessage","nonceInfo","nonceInstruction","unshift","console","warn","feePayer","programIds","accountMetas","accountMeta","includes","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","message","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","filter","has","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendAndConfirmTransaction","connection","options","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","JSON","stringify","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","parse","qsParse","qsStringify","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","clearTimeout","makeWebsocketUrl","endpoint","url","urlParse","useHttps","protocol","host","port","String","Number","urlFormat","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","fetchWithMiddleware","reject","fetch","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","rentEpoch","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","lastFetch","transactionSignatures","simulatedSignatures","wsEndpoint","_commitment","_rpcWsEndpoint","_rpcClient","href","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","decodedSignature","assert","start","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","endSlot","firstAvailableBlock","block","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","_pollingBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","simulateTransaction","_disableBlockhashCaching","encodedTransaction","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","traceIndent","logTrace","join","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_rootSubscriptions","_signatureSubscriptions","_slotSubscriptions","_slotUpdateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_logsSubscriptions","_rpcWebSocketIdleTimeout","close","connect","mentions","notification","onAccountChange","_accountChangeSubscriptionCounter","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","_programAccountChangeSubscriptionCounter","removeProgramAccountChangeListener","onLogs","_logsSubscriptionCounter","removeOnLogsListener","onSlotChange","_slotSubscriptionCounter","removeSlotChangeListener","onSlotUpdate","_slotUpdateSubscriptionCounter","removeSlotUpdateListener","override","_signatureSubscriptionCounter","onSignatureWithOptions","onRootChange","_rootSubscriptionCounter","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","default","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","split","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","u16","Secp256k1Program","publicKeyToEthAddress","keccak_256","update","digest","createInstructionWithPublicKey","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}