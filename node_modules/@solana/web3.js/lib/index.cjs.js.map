{"version":3,"file":"index.cjs.js","sources":["../src/util/to-buffer.ts","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/agent-manager.ts","../src/epoch-schedule.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\nimport {Buffer} from 'buffer';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\ntype PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\ntype PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\ntype TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\ntype NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: typeof BufferLayout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @ts-ignore\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: ReturnType<typeof setTimeout> | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    if (this._destroyTimeout !== null) {\n      clearTimeout(this._destroyTimeout);\n      this._destroyTimeout = null;\n    }\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","import {format as urlFormat, parse as urlParse} from 'url';\n\nexport function makeWebsocketUrl(endpoint: string) {\n  let url = urlParse(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== null) {\n    url.port = String(Number(url.port) + 1);\n  }\n  return urlFormat(url);\n}\n","import assert from 'assert';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {parse as urlParse} from 'url';\nimport fetch, {Response} from 'node-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.href,\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Signer>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      if ('data' in res.error) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport assert from 'assert';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {ethAddress: rawAddress, message, signature, recoveryId} = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","keys","length","Error","map","key","enum","Map","MAX_SEED_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddress","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","chars","str","span","authorized","lockup","ns64","getAlloc","type","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","account","recentBlockhash","instructions","isAccountWritable","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","u8","seq","slice","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","add","items","compileMessage","nonceInfo","nonceInstruction","unshift","console","warn","feePayer","programIds","accountMetas","accountMeta","includes","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","message","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","filter","has","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendAndConfirmTransaction","connection","options","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","JSON","stringify","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","keepAlive","maxSockets","https","Agent","http","_useHttps","_agent","requestStart","_activeRequests","_destroyTimeout","clearTimeout","requestEnd","destroy","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","makeWebsocketUrl","endpoint","url","urlParse","protocol","host","port","String","Number","urlFormat","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","logs","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","agentManager","fetchWithMiddleware","reject","fetch","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","rentEpoch","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","isArray","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","lastFetch","transactionSignatures","simulatedSignatures","wsEndpoint","_commitment","_rpcWsEndpoint","_rpcClient","href","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getStakeActivation","getProgramAccounts","configOrCommitment","extra","encoding","filters","getParsedProgramAccounts","decodedSignature","assert","start","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","endSlot","firstAvailableBlock","block","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","_pollingBlockhash","timeSinceFetch","_blockhashInfo","expired","_pollNewBlockhash","startTime","simulateTransaction","_disableBlockhashCaching","encodedTransaction","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","traceIndent","logTrace","join","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_rootSubscriptions","_signatureSubscriptions","_slotSubscriptions","_slotUpdateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","_logsSubscriptions","_rpcWebSocketIdleTimeout","close","connect","mentions","notification","onAccountChange","_accountChangeSubscriptionCounter","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","_programAccountChangeSubscriptionCounter","removeProgramAccountChangeListener","onLogs","_logsSubscriptionCounter","removeOnLogsListener","onSlotChange","_slotSubscriptionCounter","removeSlotChangeListener","onSlotUpdate","_slotUpdateSubscriptionCounter","removeSlotUpdateListener","override","_signatureSubscriptionCounter","onSignatureWithOptions","onRootChange","_rootSubscriptionCounter","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","default","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","split","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","u16","Secp256k1Program","publicKeyToEthAddress","keccak_256","update","digest","createInstructionWithPublicKey","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","va","rootSlotValid","sendAndConfirmRawTransaction","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}